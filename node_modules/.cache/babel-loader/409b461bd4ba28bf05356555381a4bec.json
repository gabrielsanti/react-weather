{"ast":null,"code":"import _regeneratorRuntime from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/gabriel/Workspace/react-weather/src/components/App.js\";\nimport React from \"react\";\nimport Today from \"./Today\";\nimport Day from \"./Day\";\nimport \"./App.css\";\nvar Api_Key = '5c50080aa56953849755237b005e9f6f';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined,\n      forecast: {\n        data: undefined\n      } //getWeather is a method we'll use to make the api call\n\n    };\n    _this.getWeather =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var city, country, api_call, response, forecast_api_call, forecast_response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              city = 'Castelfidardo';\n              country = 'Italy'; // Current weather api call\n\n              _context.next = 4;\n              return fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&units=metric&appid=\").concat(Api_Key));\n\n            case 4:\n              api_call = _context.sent;\n              _context.next = 7;\n              return api_call.json();\n\n            case 7:\n              response = _context.sent;\n              _context.next = 10;\n              return fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&units=metric&cnt=5&appid=\").concat(Api_Key));\n\n            case 10:\n              forecast_api_call = _context.sent;\n              _context.next = 13;\n              return forecast_api_call.json();\n\n            case 13:\n              forecast_response = _context.sent;\n              console.log(forecast_response);\n\n              if (city && country) {\n                _this.setState({\n                  temperature: response.main.temp,\n                  city: response.name,\n                  country: response.sys.country,\n                  description: response.weather[0].main,\n                  icon: response.weather[0].icon,\n                  forecast: {\n                    day1: forecast_response.list[0].dt\n                  },\n                  error: \"\"\n                });\n              } else {\n                _this.setState({\n                  error: \"Please input search values...\"\n                });\n              }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.componentDidMount = function () {\n      _this.getWeather();\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Today, {\n        temperature: this.state.temperature,\n        city: this.state.city,\n        country: this.state.country,\n        description: this.state.description,\n        icon: this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"forecast\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Day, {\n        dayname: this.state.day1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/gabriel/Workspace/react-weather/src/components/App.js"],"names":["React","Today","Day","Api_Key","App","state","temperature","undefined","city","country","humidity","description","error","forecast","data","getWeather","fetch","api_call","json","response","forecast_api_call","forecast_response","console","log","setState","main","temp","name","sys","weather","icon","day1","list","dt","componentDidMount","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Today from \"./Today\"\nimport Day from \"./Day\";\nimport \"./App.css\";\n\nconst Api_Key = '5c50080aa56953849755237b005e9f6f';\n\nclass App extends React.Component {\nstate = {\n\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n    forecast: {\n      data: undefined\n    }\n  }\n\n  //getWeather is a method we'll use to make the api call\n  getWeather = async () => {\n\n    const city = 'Castelfidardo'\n    const country = 'Italy'; \n\n    // Current weather api call\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${Api_Key}`);\n    const response = await api_call.json();\n\n    // Forecast weather api call\n    const forecast_api_call = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&units=metric&cnt=5&appid=${Api_Key}`);\n    const forecast_response = await forecast_api_call.json();\n\n    console.log(forecast_response);\n\n    if (city && country){\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        description: response.weather[0].main,\n        icon: response.weather[0].icon,\n        forecast: {\n          day1: forecast_response.list[0].dt\n        },\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  componentDidMount = () => {\n    this.getWeather();\n  }\n  \n  render() {\n    return (\n      <div className=\"box\">\n      \t<Today \n          temperature={this.state.temperature} \n          city={this.state.city} \n          country={this.state.country} \n          description={this.state.description} \n          icon={this.state.icon} \n        />\n      \t<div className='forecast'>\n          <li>\n            <Day dayname={this.state.day1}\n               />\n          </li>\n        </div>\n     \n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}