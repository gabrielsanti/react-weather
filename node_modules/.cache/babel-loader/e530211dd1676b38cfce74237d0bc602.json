{"ast":null,"code":"import _regeneratorRuntime from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/gabriel/Workspace/react-weather/src/components/App.js\";\nimport React from \"react\";\nimport Today from \"./Today\";\nimport Day from \"./Day\";\nimport \"./App.css\";\nvar Api_Key = '5c50080aa56953849755237b005e9f6f';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined,\n      forecast: {\n        data: undefined\n      } //getWeather is a method we'll use to make the api call\n\n    };\n    _this.getWeather =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var city, country, api_call, response, forecast_api_call, forecast_response, getDayName, getForecast;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              getDayName = function _ref2(dateString) {\n                var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n                var d = new Date(dateString);\n                var dayName = days[d.getDay()];\n                return dayName;\n              };\n\n              city = 'Castelfidardo';\n              country = 'Italy'; // Current weather api call\n\n              _context.next = 5;\n              return fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&units=metric&appid=\").concat(Api_Key));\n\n            case 5:\n              api_call = _context.sent;\n              _context.next = 8;\n              return api_call.json();\n\n            case 8:\n              response = _context.sent;\n              _context.next = 11;\n              return fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&units=metric&cnt=6&appid=\").concat(Api_Key));\n\n            case 11:\n              forecast_api_call = _context.sent;\n              _context.next = 14;\n              return forecast_api_call.json();\n\n            case 14:\n              forecast_response = _context.sent;\n\n              if (city && country) {\n                _this.setState({\n                  temperature: response.main.temp,\n                  city: response.name,\n                  country: response.sys.country,\n                  description: response.weather[0].main,\n                  icon: response.weather[0].icon,\n                  forecast: forecast_response.list,\n                  error: \"\"\n                });\n\n                getForecast = function getForecast() {\n                  _this.state.forecast.map(function (answer, i) {\n                    return React.createElement(\"li\", {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 59\n                      },\n                      __self: this\n                    }, React.createElement(Day, {\n                      dayname: answer.i.dt_text,\n                      tmpMax: answer.i.main.temp_max,\n                      tmpMin: answer.i.main.temp_min,\n                      iconName: answer.i.weather[0].icon,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 60\n                      },\n                      __self: this\n                    }));\n                  });\n                };\n\n                console.log(getForecast);\n              } else {\n                _this.setState({\n                  error: \"Please input search values...\"\n                });\n              }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.componentDidMount = function () {\n      _this.getWeather();\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Today, {\n        temperature: this.state.temperature,\n        city: this.state.city,\n        country: this.state.country,\n        description: this.state.description,\n        icon: this.state.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        className: \"forecast\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, !!this.state.forecast && this.state.forecast.map(function (answer, i) {\n        return React.createElement(Day, {\n          dayname: answer.i.dt_text,\n          tmpMax: answer.i.main.temp_max,\n          tmpMin: answer.i.main.temp_min,\n          iconName: answer.i.weather[0].icon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/gabriel/Workspace/react-weather/src/components/App.js"],"names":["React","Today","Day","Api_Key","App","state","temperature","undefined","city","country","humidity","description","error","forecast","data","getWeather","getDayName","dateString","days","d","Date","dayName","getDay","fetch","api_call","json","response","forecast_api_call","forecast_response","setState","main","temp","name","sys","weather","icon","list","getForecast","map","answer","i","dt_text","temp_max","temp_min","console","log","componentDidMount","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Today from \"./Today\"\nimport Day from \"./Day\";\nimport \"./App.css\";\n\nconst Api_Key = '5c50080aa56953849755237b005e9f6f';\n\nclass App extends React.Component {\nstate = {\n\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n    forecast: {\n      data: undefined\n    }\n  }\n\n  //getWeather is a method we'll use to make the api call\n  getWeather = async () => {\n\n    const city = 'Castelfidardo'\n    const country = 'Italy'; \n\n    // Current weather api call\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${Api_Key}`);\n    const response = await api_call.json();\n\n    // Forecast weather api call\n    const forecast_api_call = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&units=metric&cnt=6&appid=${Api_Key}`);\n    const forecast_response = await forecast_api_call.json();\n\n\n    function getDayName(dateString) {\n      var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      var d = new Date(dateString);\n      var dayName = days[d.getDay()];\n      return dayName;\n    }\n\n    if (city && country){      \n\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        description: response.weather[0].main,\n        icon: response.weather[0].icon,\n        forecast: forecast_response.list,        \n        error: \"\"\n      })\n\n      var getForecast = () => \n          {this.state.forecast.map((answer, i) => {\n          return (\n            <li>\n              <Day \n                dayname={answer.i.dt_text}\n                tmpMax={answer.i.main.temp_max}\n                tmpMin={answer.i.main.temp_min}\n                iconName={answer.i.weather[0].icon}\n                 />\n            </li>\n          )\n        })};\n      console.log(getForecast);\n    } else {\n      this.setState({\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  componentDidMount = () => {\n    this.getWeather();\n  }\n  \n  render() {\n\n    return (\n      <div className=\"box\">\n      \t<Today \n          temperature={this.state.temperature} \n          city={this.state.city} \n          country={this.state.country} \n          description={this.state.description} \n          icon={this.state.icon} \n        />\n      \t<ul className=\"forecast\">\n          {\n            !!this.state.forecast && this.state.forecast.map((answer, i) => (\n                <Day dayname={answer.i.dt_text}\n                tmpMax={answer.i.main.temp_max}\n                tmpMin={answer.i.main.temp_min}\n                iconName={answer.i.weather[0].icon} />\n            ))\n          }\n\n        </ul>\n     \n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}