{"ast":null,"code":"import _regeneratorRuntime from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/gabriel/Workspace/react-weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/gabriel/Workspace/react-weather/src/components/App.js\";\nimport React from \"react\";\nimport Today from \"./Today\";\nimport Forecast from \"./Forecast\";\nimport \"./App.css\";\nvar Api_Key = '5c50080aa56953849755237b005e9f6f';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined //getWeather is a method we'll use to make the api call\n\n    };\n    _this.getWeather =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var city, country, api_call, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              city = 'Castelfidardo';\n              country = 'Italy';\n              _context.next = 4;\n              return fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&&mode=json&appid=\").concat(Api_Key));\n\n            case 4:\n              api_call = _context.sent;\n              _context.next = 7;\n              return api_call.json();\n\n            case 7:\n              response = _context.sent;\n              console.log(response);\n\n              if (city && country && response) {\n                _this.setState({\n                  temperature: response.main.temp,\n                  city: response.name,\n                  country: response.sys.country,\n                  humidity: response.main.humidity,\n                  description: response.weather[0].description,\n                  error: \"\"\n                });\n              } else {\n                _this.setState({\n                  error: \"Please input search values...\"\n                });\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.componentDidMount = function () {\n      _this.getWeather();\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Today, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Forecast, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/gabriel/Workspace/react-weather/src/components/App.js"],"names":["React","Today","Forecast","Api_Key","App","state","temperature","undefined","city","country","humidity","description","error","getWeather","fetch","api_call","json","response","console","log","setState","main","temp","name","sys","weather","componentDidMount","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,WAAP;AAEA,IAAMC,OAAO,GAAG,kCAAhB;;IAEMC,G;;;;;;;;;;;;;;;;;UACNC,K,GAAQ;AAEJC,MAAAA,WAAW,EAAEC,SAFT;AAGJC,MAAAA,IAAI,EAAED,SAHF;AAIJE,MAAAA,OAAO,EAAEF,SAJL;AAKJG,MAAAA,QAAQ,EAAEH,SALN;AAMJI,MAAAA,WAAW,EAAEJ,SANT;AAOJK,MAAAA,KAAK,EAAEL,SAPH,CAUN;;AAVM,K;UAWNM,U;;;;6BAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAELL,cAAAA,IAFK,GAEE,eAFF;AAGLC,cAAAA,OAHK,GAGK,OAHL;AAAA;AAAA,qBAIYK,KAAK,6DAAsDN,IAAtD,cAA8DC,OAA9D,+BAA0FN,OAA1F,EAJjB;;AAAA;AAILY,cAAAA,QAJK;AAAA;AAAA,qBAKYA,QAAQ,CAACC,IAAT,EALZ;;AAAA;AAKLC,cAAAA,QALK;AAMXC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,kBAAIT,IAAI,IAAIC,OAAR,IAAmBQ,QAAvB,EAAiC;AAC/B,sBAAKG,QAAL,CAAc;AACZd,kBAAAA,WAAW,EAAEW,QAAQ,CAACI,IAAT,CAAcC,IADf;AAEZd,kBAAAA,IAAI,EAAES,QAAQ,CAACM,IAFH;AAGZd,kBAAAA,OAAO,EAAEQ,QAAQ,CAACO,GAAT,CAAaf,OAHV;AAIZC,kBAAAA,QAAQ,EAAEO,QAAQ,CAACI,IAAT,CAAcX,QAJZ;AAKZC,kBAAAA,WAAW,EAAEM,QAAQ,CAACQ,OAAT,CAAiB,CAAjB,EAAoBd,WALrB;AAMZC,kBAAAA,KAAK,EAAE;AANK,iBAAd;AAQD,eATD,MASO;AACL,sBAAKQ,QAAL,CAAc;AACZR,kBAAAA,KAAK,EAAE;AADK,iBAAd;AAGD;;AApBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAuBbc,iB,GAAoB,YAAM;AACxB,YAAKb,UAAL;AACD,K;;;;;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAEC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,CADF;AAOD;;;;EA/Ceb,KAAK,CAAC2B,S;;AAiDxB,eAAevB,GAAf","sourcesContent":["import React from \"react\";\nimport Today from \"./Today\"\nimport Forecast from \"./Forecast\";\nimport \"./App.css\";\n\nconst Api_Key = '5c50080aa56953849755237b005e9f6f';\n\nclass App extends React.Component {\nstate = {\n\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  //getWeather is a method we'll use to make the api call\n  getWeather = async () => {\n\n    const city = 'Castelfidardo'\n    const country = 'Italy'; \n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&&mode=json&appid=${Api_Key}`);\n    const response = await api_call.json();\n    console.log(response);\n    if (city && country && response ){\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  componentDidMount = () => {\n    this.getWeather();\n  }\n  \n  render() {\n    return (\n      <div className=\"box\">\n      \t<Today />\n      \t<Forecast />\n     \n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}